/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var de=Object.defineProperty;var Je=Object.getOwnPropertyDescriptor;var Xe=Object.getOwnPropertyNames;var Ze=Object.prototype.hasOwnProperty;var Qe=(c,e)=>{for(var t in e)de(c,t,{get:e[t],enumerable:!0})},et=(c,e,t,r)=>{if(e&&typeof e=="object"||typeof e=="function")for(let i of Xe(e))!Ze.call(c,i)&&i!==t&&de(c,i,{get:()=>e[i],enumerable:!(r=Je(e,i))||r.enumerable});return c};var tt=c=>et(de({},"__esModule",{value:!0}),c);var it={};Qe(it,{default:()=>me});module.exports=tt(it);var ze=require("obsidian");var ge=require("obsidian");var W=require("obsidian"),j=class extends W.Modal{constructor(e,t,r){super(e),this.folderName=t,this.folderPath=r,this.result=!1,this.modalPromise=new Promise(i=>{this.resolveModalPromise=i})}onOpen(){let{contentEl:e}=this;e.createEl("h2",{text:`[ChatGPT MD] No ${this.folderName} folder found.`}),e.createEl("p",{text:`If you choose "Yes, Create", the plugin will automatically create a folder at: ${this.folderPath}. You can change this path in the plugin settings.`}),new W.Setting(e).addButton(t=>t.setButtonText("Yes, Create Folder").setTooltip("Create folder").setCta().onClick(()=>{this.result=!0,this.resolveModalPromise(this.result),this.close()})),new W.Setting(e).addButton(t=>t.setButtonText("No, I'll create it myself").setTooltip("Cancel").setCta().onClick(()=>{this.result=!1,this.resolveModalPromise(this.result),this.close()}))}waitForModalValue(){return this.modalPromise}onClose(){let{contentEl:e}=this;e.empty()}};var Ae=async(c,e,t)=>{let r=new j(c,e,t);r.open();let i=await r.waitForModalValue();return i?(console.log("[ChatGPT MD] Creating folder"),await c.vault.createFolder(t)):console.log("[ChatGPT MD] Not creating folder"),i};var G=class{constructor(e){this.app=e}async writeInferredTitle(e,t){var s,a;let r=e.file;if(!r)throw new Error("No file is currently open");let i=this.sanitizeFileName(t),o=(a=(s=r.parent)==null?void 0:s.path)!=null?a:"/",n=`${o}/${i}.md`;for(let p=1;await this.app.vault.adapter.exists(n);p++)n=`${o}/${i} (${p}).md`;try{await this.app.fileManager.renameFile(r,n)}catch(p){throw new ge.Notice("[ChatGPT MD] Error writing inferred title to editor"),console.log("[ChatGPT MD] Error writing inferred title to editor",p),p}}sanitizeFileName(e){return e.replace(/[\\/:*?"<>|]/g,"-")}async ensureFolderExists(e,t){return!await this.app.vault.adapter.exists(e)&&!await Ae(this.app,t,e)?(new ge.Notice(`[ChatGPT MD] No ${t} found. One must be created to use the plugin. Set one in settings and make sure it exists.`),!1):!0}async createNewFile(e,t){return this.app.vault.create(e,t)}async readFile(e){return this.app.vault.read(e)}async getLinkedNoteContent(e){try{let t=this.app.metadataCache.getFirstLinkpathDest(e,"");return t?await this.app.vault.read(t):null}catch(t){return console.error(`Error reading linked note: ${e}`,t),null}}formatDate(e,t){return e.toISOString().replace(/[-:]/g,"").replace(/\..+/,"")}};var u="ollama",g="openai",m="openrouter",Ee={[g]:"/v1/chat/completions",[m]:"/api/v1/chat/completions",[u]:"/api/chat"},Ce="add-comment-block",Re="add-hr",Te="call-chatgpt-api",_e="stop-streaming",Me="move-to-chat",ye="infer-title",we="choose-chat-template",Pe="clear-chat",Ie=`I am sorry. There was an authorization issue with the external API (Status 401).
Please check your API key in the settings`,Oe=`I am sorry. There was an issue reaching the network.
Please check your network connection.`,Ne="I am sorry, your request looks wrong. Please check your URL or model name in the settings or frontmatter.",z="I am sorry, I could not answer your request because of an error, here is what went wrong:",he="chatFolder",Fe="chatTemplateFolder",h=`

`,I=/---[\s\S]*?---/g,De=/\[\[([^\][]+)\]\]/g,xe=/\[([^\]]+)\]\(([^()]+)\)/g,be=`=begin-chatgpt-md-comment${h}`,Le="=end-chatgpt-md-comment",$e=3,ue=6,Ge="English",ke=4,J="YYYYMMDDhhmmss",Ue="Failed to fetch",fe="__chatgpt_plugin",k=`<hr class="${fe}">`,w="role::",O="assistant";var E="user",X=`---
system_commands: ['I am a helpful assistant.']
frequency_penalty: 0
max_tokens: 300
model: gpt-4.1-mini
presence_penalty: 0
stream: true
temperature: 1
---`,Z=6e3;var He=c=>{let t=(c.match(/```/g)||[]).length%2!==0;return t&&console.log("[ChatGPT MD] Unclosed code block detected"),t};var rt=c=>{let e=c.replace(/[-/\\^$*+?.()|[\]{}]/g,"\\$&").replace("YYYY","\\d{4}").replace("MM","\\d{2}").replace("DD","\\d{2}").replace("hh","\\d{2}").replace("mm","\\d{2}").replace("ss","\\d{2}");return new RegExp(`^${e}$`)},Ve=(c="",e)=>(c==null?void 0:c.length)==e.length&&rt(e).test(c),N=c=>c===0?"":c>ue?"#".repeat(ue)+" ":"#".repeat(c)+" ",B=(c,e,t)=>`${h}${k}${h}${c}${w}${e}${t?`<span style="font-size: small;"> (${t})</span>`:""}${h}`,Q=c=>{let t=c.replace(/^---\n/,"").replace(/\n---$/,"").split(`
`),r={},i=null,o=[];for(let n=0;n<t.length;n++){let s=t[n].trim();if(!s)continue;if(i!==null)if(s.startsWith("-")){let d=s.substring(1).trim();(d.startsWith("'")&&d.endsWith("'")||d.startsWith('"')&&d.endsWith('"'))&&(d=d.substring(1,d.length-1)),o.push(d);continue}else r[i]=o,i=null,o=[];let a=s.indexOf(":");if(a===-1)continue;let p=s.substring(0,a).trim(),l=s.substring(a+1).trim();if(l===""&&n+1<t.length&&t[n+1].trim().startsWith("-")){i=p,o=[];continue}l.startsWith("[")&&l.endsWith("]")?r[p]=l.slice(1,-1).split(",").map(d=>{let f=d.trim();return f.startsWith("'")&&f.endsWith("'")||f.startsWith('"')&&f.endsWith('"')?f.slice(1,-1):f}):l==="true"?r[p]=!0:l==="false"?r[p]=!1:l==="null"?r[p]=null:isNaN(Number(l))?r[p]=l:r[p]=Number(l)}return i!==null&&(r[i]=o),r};var U=class{addHorizontalRule(e,t,r){let i=`${h}<hr class="${fe}">${h}${N(r)}${w}${t}${h}`,o=e.getCursor();e.replaceRange(i,o),e.setCursor(o.line+i.split(`
`).length-1,0)}appendMessage(e,t,r){let i=N(r),o=B(i,O),n=B(i,E);e.replaceRange(`${o}${t}${n}`,e.getCursor())}clearChat(e){let r=e.getValue().match(I);if(r!=null&&r.length){let[i]=r;e.setValue(i),e.setCursor({line:e.lastLine()+1,ch:0})}else e.setValue("")}moveCursorToEnd(e){try{let r={line:e.lastLine()+1,ch:0};e.setCursor(r)}catch(t){throw new Error("Error moving cursor to end of file"+t)}}addCommentBlock(e,t,r){let i=e.getCursor(),o=`${t}${h}${r}`;e.replaceRange(o,i),e.setCursor({line:i.line+1,ch:i.ch})}};var H=class{constructor(e,t){this.fileService=e;this.notificationService=t}findLinksInMessage(e){let t=[{regex:De,fullMatchIndex:0,titleIndex:1},{regex:xe,fullMatchIndex:0,titleIndex:2}],r=[],i=new Set;for(let{regex:o,fullMatchIndex:n,titleIndex:s}of t)for(let a of e.matchAll(o)){let p=a[n],l=a[s];l&&!i.has(l)&&!l.startsWith("http://")&&!l.startsWith("https://")&&(r.push({link:p,title:l}),i.add(l))}return r}splitMessages(e){return e?e.split(k):[]}removeYAMLFrontMatter(e){return e&&e.replace(I,"").trim()}removeCommentsFromMessages(e){try{let t=/=begin-chatgpt-md-comment[\s\S]*?=end-chatgpt-md-comment/g;return e.replace(t,"")}catch(t){return this.notificationService.showError("Error removing comments from messages: "+t),e}}extractRoleAndMessage(e){try{if(!e.includes(w))return{role:E,content:e};let[t,...r]=e.split(w)[1].split(`
`);return{role:this.cleanupRole(t),content:r.join(`
`).trim()}}catch(t){return this.notificationService.showError("Failed to extract role and message: "+t),{role:E,content:e}}}cleanupRole(e){let t=e.trim().toLowerCase(),i=[E,O].find(o=>t.includes(o));return i||(this.notificationService.showWarning(`Unknown role: "${e}", defaulting to user`),E)}cleanMessagesFromNote(e){return this.splitMessages(this.removeYAMLFrontMatter(e.getValue())).map(r=>this.removeCommentsFromMessages(r))}async getMessagesFromEditor(e,t){let r=this.cleanMessagesFromNote(e);r=await Promise.all(r.map(async o=>{let n=this.findLinksInMessage(o);for(let s of n)try{let a=await this.fileService.getLinkedNoteContent(s.title);if(a){let p=new RegExp(`${h}${k}${h}#+ ${w}(?:${E}|${O}).*$`,"gm");a=a==null?void 0:a.replace(p,"").replace(I,""),o=o.replace(new RegExp(this.escapeRegExp(s.link),"g"),`${h}${s.title}${h}${a}${h}`)}else console.warn(`Error fetching linked note content for: ${s.link}`)}catch(a){console.error(a)}return o}));let i=r.map(o=>this.extractRoleAndMessage(o));return{messages:r,messagesWithRole:i}}addSystemCommandsToMessages(e,t){return!t||t.length===0?e:[...t.map(i=>({role:"system",content:i})),...e]}getHeaderRole(e,t,r){return`${h}${k}${h}${e}${w}${t}${r?`<span style="font-size: small;"> (${r})</span>`:""}${h}`}unfinishedCodeBlock(e){let t=e.match(/```/g);return t!==null&&t.length%2!==0}formatMessage(e,t,r){let i=N(t);return`${this.getHeaderRole(i,e.role,r)}${e.content}`}appendMessage(e,t,r){let i=N(r),o=this.getHeaderRole(i,O),n=this.getHeaderRole(i,E);e.replaceRange(`${o}${t}${n}`,e.getCursor())}processResponse(e,t,r){t.mode==="streaming"?t.wasAborted||this.processStreamingResponse(e,r):this.processStandardResponse(e,t,r)}processStreamingResponse(e,t){let r=N(t.headingLevel),i=this.getHeaderRole(r,E);e.replaceRange(i,e.getCursor());let o=e.getCursor(),n={line:o.line,ch:o.ch+i.length};e.setCursor(n)}processStandardResponse(e,t,r){let i=typeof t=="object"&&t.fullString||t,o=typeof t=="object"?t.model:void 0,n=this.unfinishedCodeBlock(i)?i+"\n```":i,s=N(r.headingLevel),a=this.getHeaderRole(s,O,o),p=this.getHeaderRole(s,E);e.replaceRange(`${a}${n}${p}`,e.getCursor())}escapeRegExp(e){return e.replace(/[.*+?^${}()|[\]\\]/g,"\\$&")}};var D=require("obsidian");var b=require("obsidian"),ee=class extends b.SuggestModal{constructor(e,t,r){super(e),this.settings=t,this.titleDate=r}getFilesInChatFolder(){let e=this.app.vault.getAbstractFileByPath(this.settings.chatTemplateFolder);if(e!=null)return e.children;throw new b.Notice(`Error getting folder: ${this.settings.chatTemplateFolder}`),new Error(`Error getting folder: ${this.settings.chatTemplateFolder}`)}getSuggestions(e){let t=this.getFilesInChatFolder();return e==""?t.map(r=>({title:r.basename,file:r})).sort((r,i)=>r.title.localeCompare(i.title)):t.filter(r=>r.basename.toLowerCase().includes(e.toLowerCase())).map(r=>({title:r.basename,file:r})).sort((r,i)=>r.title.localeCompare(i.title))}renderSuggestion(e,t){t.createEl("div",{text:e.title})}async onChooseSuggestion(e,t){new b.Notice(`Selected ${e.title}`);let r=await this.app.vault.read(e.file),i=r;!/^---\n[\s\S]*?\n---/.test(r)&&this.settings.defaultChatFrontmatter&&(i=this.settings.defaultChatFrontmatter+`

`+r);let n=`${this.titleDate} ${e.title}`,s=(0,b.normalizePath)(`${this.settings.chatFolder}/${n}.md`),a=1;for(;await this.app.vault.adapter.exists(s);)s=(0,b.normalizePath)(`${this.settings.chatFolder}/${n} (${a}).md`),a++;try{let p=await this.app.vault.create(s,i);await this.app.workspace.openLinkText(p.basename,"",!0)}catch(p){console.error(p)}}};var V=class{constructor(e,t,r){this.app=e;this.fileService=t;this.editorContentService=r}async createNewChatFromTemplate(e,t){try{if(!e.chatFolder||e.chatFolder.trim()===""){new D.Notice("[ChatGPT MD] No chat folder value found. Please set one in settings.");return}if(!e.chatTemplateFolder||e.chatTemplateFolder.trim()===""){new D.Notice("[ChatGPT MD] No chat template folder value found. Please set one in settings.");return}if(!await this.fileService.ensureFolderExists(e.chatFolder,he)||!await this.fileService.ensureFolderExists(e.chatTemplateFolder,Fe))return;new ee(this.app,e,t).open()}catch(r){console.error("[ChatGPT MD] Error in Create new chat from template",r),new D.Notice("[ChatGPT MD] Error in Create new chat from template, check console")}}async createNewChatWithHighlightedText(e,t){try{let r=e.getSelection();if(!t.chatFolder||t.chatFolder.trim()===""){new D.Notice("[ChatGPT MD] No chat folder value found. Please set one in settings.");return}if(!await this.fileService.ensureFolderExists(t.chatFolder,he))return;let o=`${this.fileService.formatDate(new Date,t.dateFormat)}.md`,n=`${t.chatFolder}/${o}`,s="";t.defaultChatFrontmatter&&(s=t.defaultChatFrontmatter+`

`),r&&(s+=r);let a=await this.fileService.createNewFile(n,s);await this.app.workspace.openLinkText(a.basename,"",!0,{state:{mode:"source"}});let p=this.app.workspace.getActiveViewOfType(D.MarkdownView);if(!p){new D.Notice("No active markdown editor found.");return}p.editor.focus(),this.editorContentService.moveCursorToEnd(p.editor)}catch(r){console.error("[ChatGPT MD] Error in Create new chat with highlighted text",r),new D.Notice("[ChatGPT MD] Error in Create new chat with highlighted text, check console")}}};var Se=require("obsidian");var Ke=require("obsidian"),C=class{showNotification(e,t=5e3){new Ke.Notice(e,t)}formatChatMessage(e,t=!1){return t?`I am sorry. ${e}`:e}showSuccess(e){this.showNotification(`\u2705 ${e}`,3e3)}showWarning(e){this.showNotification(`\u26A0\uFE0F ${e}`,5e3)}showError(e){this.showNotification(`\u274C ${e}`,7e3)}};function P(c){return!!c&&c.trim()!==""}var A=class{constructor(e){this.notificationService=e||new C}getApiKey(e,t){switch(t){case g:return e.apiKey;case m:return e.openrouterApiKey;case u:return"";default:return""}}validateApiKey(e,t){if(t!==u&&!P(e)){let r=`${t} API key is missing or invalid. Please add your ${t} API key in the settings.`;throw this.notificationService.showError(r),new Error(r)}}createAuthHeaders(e,t){let r={"Content-Type":"application/json"};switch(t){case g:r.Authorization=`Bearer ${e}`;break;case m:r.Authorization=`Bearer ${e}`,r["HTTP-Referer"]="https://github.com/bramses/chatgpt-md",r["X-Title"]="Obsidian ChatGPT MD Plugin";break;case u:break}return r}};var M=class{constructor(e){this.collectedCitations=new Set;this.notificationService=e||new C}insertAssistantHeader(e,t,r){let i=B(t,O,r),o={line:e.getCursor().line,ch:e.getCursor().ch};e.replaceRange(i,o);let n={line:o.line,ch:o.ch+i.length};return e.setCursor(n),{initialCursor:o,newCursor:n}}parseNonStreamingResponse(e,t){var r,i,o;switch(t){case g:return e.choices[0].message.content;case m:return e.choices[0].message.content;case u:return e.message&&e.message.content?e.message.content:e.response?e.response:JSON.stringify(e);default:return console.warn(`Unknown service type: ${t}`),((o=(i=(r=e==null?void 0:e.choices)==null?void 0:r[0])==null?void 0:i.message)==null?void 0:o.content)||(e==null?void 0:e.response)||JSON.stringify(e)}}processStreamLine(e,t,r,i,o,n){switch(o){case g:case m:return this.processOpenAIFormat(e,t,r,i,n);case u:return this.processOllamaFormat(e,t,r,i,n);default:return console.warn(`Unknown service type for streaming: ${o}`),t}}processOpenAIFormat(e,t,r,i,o){if(e.trim()==="")return t;try{let n=JSON.parse(e.replace("data: ",""));if(n.citations&&n.citations.length>0){console.log("Found citations in chunk:",n.citations);for(let s of n.citations)this.collectedCitations.add(s),console.log("Added citation to set:",s);console.log("Current citations set size:",this.collectedCitations.size)}if(n.choices&&n.choices[0]){let{delta:s}=n.choices[0];if(s&&s.content){if(o)r.replaceSelection(s.content);else{let a=r.getCursor();r.replaceRange(s.content,a),r.setCursor({line:a.line,ch:a.ch+s.content.length})}return t+s.content}}return t}catch(n){return t}}processOllamaFormat(e,t,r,i,o){if(e.trim()==="")return t;try{let n=JSON.parse(e);if(n.message&&n.message.content){let s=n.message.content;if(o)r.replaceSelection(s);else{let a=r.getCursor();r.replaceRange(s,a),r.setCursor({line:a.line,ch:a.ch+s.length})}return t+s}if(n.response){if(o)r.replaceSelection(n.response);else{let s=r.getCursor();r.replaceRange(n.response,s),r.setCursor({line:s.line,ch:s.ch+n.response.length})}return t+n.response}return t}catch(n){return t}}async processStreamResponse(e,t,r,i,o,n){let s=e.body.getReader(),a=new TextDecoder,p=!1,l="",d=!1;try{for(;!p;){let{value:f,done:F}=await s.read();if(p=F,p)break;let Y=a.decode(f).split(`
`);for(let $ of Y)$.startsWith("data: [DONE]")||($.startsWith("data:")?l=this.processStreamLine($,l,r,i.newCursor,t,o):$.trim()!==""&&(l=this.processStreamLine($,l,r,i.newCursor,t,o)))}}catch(f){console.error("Error processing stream:",f)}if(n&&n.wasAborted())return d=!0,n.resetAbortedFlag(),o||r.replaceRange("",i.initialCursor,r.getCursor()),{text:"",wasAborted:d};if(He(l)){let f=r.getCursor();r.replaceRange("\n```",f),l+="\n```"}if(this.collectedCitations.size>0){console.log("Completed streaming response, appending citations"),console.log("Citations to append:",Array.from(this.collectedCitations));let F=`

**Sources:**
`+Array.from(this.collectedCitations).map((Y,$)=>`${$+1}. [${Y}](${Y})`).join(`
`),y=r.getCursor();r.replaceRange(F,y),r.setCursor({line:y.line,ch:y.ch+F.length}),l+=F,this.collectedCitations.clear(),console.log("Citations set cleared after appending to response")}if(!o){let f=r.getCursor();r.replaceRange("",f,{line:1/0,ch:1/0})}return{text:l,wasAborted:d}}};var R=class{constructor(e){this.notificationService=e}handleApiError(e,t,r={showNotification:!0,logToConsole:!0,returnForChat:!1}){var d,f,F,y;let i=`[ChatGPT MD] ${t}`,o="unknown_error",n="",s="",a=((d=r.context)==null?void 0:d.model)||"",p=((f=r.context)==null?void 0:f.url)||"",l=this.formatContextInfo(a,p);if(e instanceof Object?e.name==="AbortError"?(o="stream_aborted",n=`${i}: Stream aborted`,s="Stream aborted"):e.message===Ue?(o="network_error",n=`${i}: Network connection error`,s=Oe):e.status===401||((F=e.error)==null?void 0:F.status)===401?(o="authentication_error",n=`${i}: Authentication failed (401)`,s=Ie):e.status===404||((y=e.error)==null?void 0:y.status)===404?(o="not_found_error",n=`${i}: Resource not found (404)${l?` - ${l}`:""}`,s=`${Ne}${l?`${h}${l}`:""}`):e.error?(o="api_error",n=`${i}: ${e.error.message}${l?` - ${l}`:""}`,s=`${z}${h}${e.error.message}${l?`${h}${l}`:""}`):(n=`${i}: ${JSON.stringify(e)}${l?` - ${l}`:""}`,s=`${z}${h}${JSON.stringify(e)}${l?`${h}${l}`:""}`):(n=`${i}: ${e}${l?` - ${l}`:""}`,s=`${z}${h}${e}${l?`${h}${l}`:""}`),r.logToConsole&&console.error(n,e,r.context),r.showNotification&&this.notificationService.showNotification(n,5e3),r.returnForChat)return`I am sorry, I could not answer your request because of an error, here is what went wrong-

${e instanceof Object&&e.error?e.error.message:(e==null?void 0:e.message)||e||"undefined"}

Model- ${a}, URL- ${p}`;throw new Error(n)}formatContextInfo(e,t){let r=[];return e&&r.push(`Model: ${e}`),t&&r.push(`URL: ${t}`),r.length>0?r.join(", "):""}handleUrlError(e,t,r){let i=`[ChatGPT MD] Error calling specified URL: ${e}`;return this.notificationService.showNotification(i),console.error(i,{url:e,defaultUrl:t,serviceName:r}),`I am sorry, I could not answer your request because of an error, here is what went wrong-

Error connecting to the custom URL.

Model- ${r===u?"llama2":"unknown"}, URL- ${e}`}handleModelError(e,t){let r=`[ChatGPT MD] Error calling model: ${e}`;return this.notificationService.showNotification(r),console.error(r,{model:e,serviceName:t}),`I am sorry, there was an error with the model: ${e}. Please check your settings or try a different model.`}handleValidationError(e,t){let r=`[ChatGPT MD] Validation Error: ${e}`;throw this.notificationService.showNotification(r),console.error(r,t),new Error(r)}};var _=class{constructor(e,t,r,i){this.abortController=null;this.wasStreamingAborted=!1;this.notificationService=t||new C,this.errorService=e||new R(this.notificationService),this.apiAuthService=r||new A,this.apiResponseParser=i||new M}async makeStreamingRequest(e,t,r,i){try{console.log(`[ChatGPT MD] Making streaming request to ${i}`,t),this.abortController=new AbortController;let o=await fetch(e,{method:"POST",headers:r,body:JSON.stringify(t),signal:this.abortController.signal});if(!o.ok)throw await this.handleHttpError(o,i,t,e);if(!o.body)throw new Error("The response body was empty");return o}catch(o){return this.handleRequestError(o,i,t,e)}}async makeNonStreamingRequest(e,t,r,i){try{console.log(`[ChatGPT MD] Making non-streaming request to ${i}`,t);let n=(await(0,Se.requestUrl)({url:e,method:"POST",headers:r,contentType:"application/json",body:JSON.stringify(t),throw:!1})).json;return n!=null&&n.error?this.errorService.handleApiError({error:n.error},i,{returnForChat:!0,showNotification:!0,context:{model:t.model,url:e}}):this.apiResponseParser.parseNonStreamingResponse(n,i)}catch(o){return this.errorService.handleApiError(o,i,{returnForChat:!0,showNotification:!0,context:{model:t.model,url:e}})}}async makeGetRequest(e,t,r){try{console.log(`[ChatGPT MD] Making GET request to ${r}`);let i=await(0,Se.requestUrl)({url:e,method:"GET",headers:t,throw:!1});if(i.status!==200)throw new Error(`Failed to fetch data from ${e}: ${i.status}`);return i.json}catch(i){throw console.error(`Error making GET request to ${r}:`,i),i}}async handleHttpError(e,t,r,i){let o;try{o=await e.json()}catch(s){o={status:e.status,statusText:e.statusText}}let n=this.errorService.handleApiError(o,t,{returnForChat:!1,showNotification:!0,context:{model:r.model,url:i,status:e.status}});return new Error(n)}handleRequestError(e,t,r,i){return this.errorService.handleApiError(e,t,{returnForChat:!1,showNotification:!0,context:{model:r.model,url:i}})}stopStreaming(){this.abortController&&(this.wasStreamingAborted=!0,this.abortController.abort(),this.abortController=null)}wasAborted(){return this.wasStreamingAborted}resetAbortedFlag(){this.wasStreamingAborted=!1}};var L=class{constructor(e,t){this.inferTitleFromMessages=async(e,t,r)=>{try{if(t.length<2)return this.notificationService.showWarning("Not enough messages to infer title. Minimum 2 messages."),"";let i=`Infer title from the summary of the content of these messages. The title **cannot** contain any of the following characters: colon (:), back slash (\\), forward slash (/), asterisk (*), question mark (?), double quote ("), less than (<), greater than (>), or pipe (|) as these are invalid in file names. Just return the title. Write the title in ${r.inferTitleLanguage}. 
Messages:${h}${JSON.stringify(t)}`,o=this.getDefaultConfig(),n={...o,...r};n.model||(console.log("[ChatGPT MD] Model not set for title inference, using default model"),n.model=o.model),n.url||(console.log("[ChatGPT MD] URL not set for title inference, using default URL"),n.url=o.url),console.log("[ChatGPT MD] Inferring title with model:",n.model);try{return await this.callNonStreamingAPI(e,[{role:E,content:i}],n)}catch(s){return console.error("[ChatGPT MD] Error calling API for title inference:",s),""}}catch(i){return console.error("[ChatGPT MD] Error inferring title:",i),this.showNoTitleInferredNotification(),""}};this.notificationService=t!=null?t:new C,this.errorService=e!=null?e:new R(this.notificationService),this.apiService=new _(this.errorService,this.notificationService),this.apiAuthService=new A(this.notificationService),this.apiResponseParser=new M(this.notificationService)}async callAIAPI(e,t={},r,i,o,n,s,a){let p={...this.getDefaultConfig(),...t};return a&&(p.url=i),t.stream&&o?this.callStreamingAPI(s,e,p,o,r,n):this.callNonStreamingAPI(s,e,p)}async inferTitle(e,t,r,i){try{if(!e.file)throw new Error("No active file found");let o=this.getApiKeyFromSettings(t),n=await this.inferTitleFromMessages(o,r,t),s="";return typeof n=="string"?s=n:n&&typeof n=="object"&&(s=n.fullString||""),s&&s.trim().length>0?(await i.writeInferredTitle(e,s.trim()),s.trim()):(this.showNoTitleInferredNotification(),"")}catch(o){return console.error("[ChatGPT MD] Error in inferTitle:",o),this.showNoTitleInferredNotification(),""}}showNoTitleInferredNotification(){var e;(e=this.notificationService)==null||e.showWarning("Could not infer title. The file name was not changed.")}stopStreaming(){var e;(e=this.apiService)==null||e.stopStreaming()}processStreamingResult(e){return e.wasAborted&&e.text===""?{fullString:"",mode:"streaming",wasAborted:!0}:{fullString:e.text,mode:"streaming",wasAborted:e.wasAborted}}getApiEndpoint(e){return`${e.url}${Ee[this.serviceType]}`}prepareApiCall(e,t,r){this.apiAuthService.validateApiKey(e,this.serviceType);let i=this.createPayload(r,t),o=this.apiAuthService.createAuthHeaders(e,this.serviceType);return{payload:i,headers:o}}handleApiCallError(e,t,r=!1){if(console.error(`[ChatGPT MD] ${this.serviceType} API error:`,e),!!r)throw e;return this.errorService.handleApiError(e,this.serviceType,{returnForChat:!0,showNotification:!0,context:{model:t.model,url:t.url}})}},We=(c,e)=>{if(e!=null&&e.includes(m))return m;if(e!=null&&e.includes("local"))return u;let t="openrouter",r=["localhost","127.0.0.1"];if(c!=null&&c.includes(t))return m;if(r.some(i=>c==null?void 0:c.includes(i)))return u},Be=c=>{let e=P(c.openrouterApiKey),t=P(c.apiKey);return t&&e?g:e?m:t?g:null};var S={aiService:g,frequency_penalty:0,max_tokens:300,model:"gpt-4",presence_penalty:0,stream:!0,system_commands:null,tags:[],temperature:1,title:"Untitled",top_p:1,url:"https://api.openai.com"},qe=async(c,e)=>{try{let t=new A;if(!P(e))return console.error("OpenAI API key is missing. Please add your OpenAI API key in the settings."),[];let r=new _,i=t.createAuthHeaders(e,g);return(await r.makeGetRequest(`${c}/v1/models`,i,g)).data.filter(n=>(n.id.includes("o3")||n.id.includes("o4")||n.id.includes("o1")||n.id.includes("gpt-4")||n.id.includes("gpt-3"))&&!n.id.includes("audio")&&!n.id.includes("transcribe")&&!n.id.includes("realtime")&&!n.id.includes("o1-pro")&&!n.id.includes("tts")).sort((n,s)=>n.id<s.id?1:n.id>s.id?-1:0).map(n=>n.id)}catch(t){return console.error("Error fetching models:",t),[]}},te=class extends L{constructor(t,r,i,o,n){super(t,r);this.serviceType=g;this.errorService=t||new R(this.notificationService),this.apiService=i||new _(this.errorService,this.notificationService),this.apiAuthService=o||new A(this.notificationService),this.apiResponseParser=n||new M(this.notificationService)}getDefaultConfig(){return S}getApiKeyFromSettings(t){return this.apiAuthService.getApiKey(t,g)}createPayload(t,r){let i=t.model.includes("@")?t.model.split("@")[1]:t.model,o=r;if(t.system_commands&&t.system_commands.length>0){let s=t.system_commands.map(a=>({role:"developer",content:a}));o=[...s,...r],console.log(`[ChatGPT MD] Added ${s.length} developer commands to messages`)}let n={model:i,messages:o,max_completion_tokens:t.max_tokens,stream:t.stream};return i.includes("search")||(n.temperature=t.temperature,n.top_p=t.top_p,n.presence_penalty=t.presence_penalty,n.frequency_penalty=t.frequency_penalty),n}handleAPIError(t,r,i){let o={model:r.model,url:r.url,defaultUrl:S.url,aiService:g};return t instanceof Object&&r.url!==S.url?this.errorService.handleUrlError(r.url,S.url,g):this.errorService.handleApiError(t,g,{context:o,showNotification:!0,logToConsole:!0})}async callStreamingAPI(t,r,i,o,n,s){try{let{payload:a,headers:p}=this.prepareApiCall(t,r,i),l=this.apiResponseParser.insertAssistantHeader(o,n,a.model),d=await this.apiService.makeStreamingRequest(this.getApiEndpoint(i),a,p,this.serviceType),f=await this.apiResponseParser.processStreamResponse(d,this.serviceType,o,l,s,this.apiService);return this.processStreamingResult(f)}catch(a){return{fullString:`Error: ${a}`,mode:"streaming"}}}async callNonStreamingAPI(t,r,i){var o;try{console.log('[ChatGPT MD] "no stream"',i),i.stream=!1;let{payload:n,headers:s}=this.prepareApiCall(t,r,i);return{fullString:await this.apiService.makeNonStreamingRequest(this.getApiEndpoint(i),n,s,this.serviceType),model:n.model}}catch(n){let s=r.length===1&&((o=r[0].content)==null?void 0:o.toString().includes("Infer title from the summary"));return this.handleApiCallError(n,i,s)}}showNoTitleInferredNotification(){this.notificationService.showWarning("Could not infer title. The file name was not changed.")}};var T={aiService:u,model:"llama2",url:"http://localhost:11434",stream:!0,title:"Untitled",system_commands:null},Ye=async c=>{try{let e=new _,t={"Content-Type":"application/json"};return(await e.makeGetRequest(`${c}/api/tags`,t,u)).models.sort((o,n)=>o.name<n.name?1:o.name>n.name?-1:0).map(o=>`local@${o.name}`)}catch(e){return console.error("Error fetching models:",e),[]}},re=class extends L{constructor(t,r,i,o,n){super(t,r);this.serviceType=u;this.errorService=t||new R(this.notificationService),this.apiService=i||new _(this.errorService,this.notificationService),this.apiAuthService=o||new A(this.notificationService),this.apiResponseParser=n||new M(this.notificationService)}getDefaultConfig(){return T}getApiKeyFromSettings(t){return this.apiAuthService.getApiKey(t,u)}createPayload(t,r){let i=t.model.includes("@")?t.model.split("@")[1]:t.model,o=r;if(t.system_commands&&t.system_commands.length>0){let n=t.system_commands.map(s=>({role:"system",content:s}));o=[...n,...r],console.log(`[ChatGPT MD] Added ${n.length} system commands to messages`)}return{model:i,messages:o,stream:t.stream}}handleAPIError(t,r,i){let o={model:r.model,url:r.url,defaultUrl:T.url,aiService:u};return t instanceof Object&&r.url!==T.url?this.errorService.handleUrlError(r.url,T.url,u):this.errorService.handleApiError(t,u,{context:o,showNotification:!0,logToConsole:!0})}async callStreamingAPI(t,r,i,o,n,s){try{let{payload:a,headers:p}=this.prepareApiCall(t,r,i),l=this.apiResponseParser.insertAssistantHeader(o,n,a.model),d=await this.apiService.makeStreamingRequest(this.getApiEndpoint(i),a,p,this.serviceType),f=await this.apiResponseParser.processStreamResponse(d,this.serviceType,o,l,s,this.apiService);return this.processStreamingResult(f)}catch(a){return console.error("[ChatGPT MD] Ollama streaming error:",a),{fullString:`Error: ${a}`,mode:"streaming"}}}async callNonStreamingAPI(t,r,i){var o;try{console.log('[ChatGPT MD] "no stream"',i),i.stream=!1;let{payload:n,headers:s}=this.prepareApiCall(t,r,i);return{fullString:await this.apiService.makeNonStreamingRequest(this.getApiEndpoint(i),n,s,this.serviceType),model:n.model}}catch(n){let s=r.length===1&&((o=r[0].content)==null?void 0:o.toString().includes("Infer title from the summary"));return this.handleApiCallError(n,i,s)}}showNoTitleInferredNotification(){this.notificationService.showWarning("Could not infer title. The file name was not changed.")}};var v={aiService:m,frequency_penalty:.5,max_tokens:300,model:"anthropic/claude-3-opus:beta",openrouterApiKey:"",presence_penalty:.5,stream:!0,system_commands:null,tags:[],temperature:.3,title:"Untitled",top_p:1,url:"https://openrouter.ai"},je=async(c,e)=>{try{let t=new A;if(!P(e))return console.error("OpenRouter API key is missing. Please add your OpenRouter API key in the settings."),[];let r=new _,i=t.createAuthHeaders(e,m);return(await r.makeGetRequest(`${c}/api/v1/models`,i,m)).data.sort((n,s)=>n.id<s.id?1:n.id>s.id?-1:0).map(n=>`${m}@${n.id}`)}catch(t){return console.error("Error fetching models:",t),[]}},ie=class extends L{constructor(t,r,i,o,n){super(t,r);this.serviceType=m;this.errorService=t||new R(this.notificationService),this.apiService=i||new _(this.errorService,this.notificationService),this.apiAuthService=o||new A(this.notificationService),this.apiResponseParser=n||new M(this.notificationService)}getDefaultConfig(){return v}getApiKeyFromSettings(t){return this.apiAuthService.getApiKey(t,m)}createPayload(t,r){let i=t.model.includes("@")?t.model.split("@")[1]:t.model,o=r;if(t.system_commands&&t.system_commands.length>0){let n=t.system_commands.map(s=>({role:"system",content:s}));o=[...n,...r],console.log(`[ChatGPT MD] Added ${n.length} system commands to messages`)}return{model:i,messages:o,max_tokens:t.max_tokens,temperature:t.temperature,top_p:t.top_p,presence_penalty:t.presence_penalty,frequency_penalty:t.frequency_penalty,stream:t.stream}}handleAPIError(t,r,i){let o={model:r.model,url:r.url,defaultUrl:v.url,aiService:m};return t instanceof Object&&r.url!==v.url?this.errorService.handleUrlError(r.url,v.url,m):this.errorService.handleApiError(t,m,{context:o,showNotification:!0,logToConsole:!0})}async callStreamingAPI(t,r,i,o,n,s){try{let{payload:a,headers:p}=this.prepareApiCall(t,r,i),l=this.apiResponseParser.insertAssistantHeader(o,n,a.model),d=await this.apiService.makeStreamingRequest(this.getApiEndpoint(i),a,p,this.serviceType),f=await this.apiResponseParser.processStreamResponse(d,this.serviceType,o,l,s,this.apiService);return this.processStreamingResult(f)}catch(a){return{fullString:`Error: ${a}`,mode:"streaming"}}}async callNonStreamingAPI(t,r,i){var o;try{console.log('[ChatGPT MD] "no stream"',i),i.stream=!1;let{payload:n,headers:s}=this.prepareApiCall(t,r,i);return{fullString:await this.apiService.makeNonStreamingRequest(this.getApiEndpoint(i),n,s,this.serviceType),model:n.model}}catch(n){let s=r.length===1&&((o=r[0].content)==null?void 0:o.toString().includes("Infer title from the summary"));return this.handleApiCallError(n,i,s)}}showNoTitleInferredNotification(){this.notificationService.showWarning("Could not infer title. The file name was not changed.")}};var K=class{constructor(e){this.app=e}getFrontmatter(e,t){let i=e.editor.getValue().match(I),o=i?Q(i[0]):{},n=t.defaultChatFrontmatter?Q(t.defaultChatFrontmatter):{},s={...t,...n,...o},a=s.aiService||We(s.url,s.model)||Be(s)||g;return{...{[g]:S,[u]:T,[m]:v}[a]||S,...t,...n,...o,aiService:a}}updateFrontmatterField(e,t,r){let i=e.getValue(),o=i.match(I),n;if(o){let a=o[0].replace(/---/g,""),p=new RegExp(`^${t}:\\s*(.*)$`,"m");p.test(a)?a=a.replace(p,`${t}: ${r}`):a+=`
${t}: ${r}`,n=i.replace(I,`---${a}---`)}else n=`---
${t}: ${r}
---
${i}`;e.setValue(n)}objectToYamlFrontmatter(e){return`---
${Object.entries(e).map(([r,i])=>i==null?`${r}:`:typeof i=="string"?`${r}: "${i}"`:`${r}: ${i}`).join(`
`)}
---

`}generateFrontmatter(e,t={}){if(e.defaultChatFrontmatter){if(Object.keys(t).length>0){let n={...Q(e.defaultChatFrontmatter),...t};return this.objectToYamlFrontmatter(n)}return e.defaultChatFrontmatter+`

`}let r=t.aiService||g,i={stream:e.stream,...t};switch(r){case g:i={...i,model:S.model,temperature:S.temperature,top_p:S.top_p,max_tokens:S.max_tokens,presence_penalty:S.presence_penalty,frequency_penalty:S.frequency_penalty};break;case u:i={...i,model:T.model,url:T.url};break;case m:i={...i,model:v.model,temperature:v.temperature,top_p:v.top_p,max_tokens:v.max_tokens,presence_penalty:v.presence_penalty,frequency_penalty:v.frequency_penalty};break}return this.objectToYamlFrontmatter(i)}};var oe=class{constructor(e,t,r,i,o,n){this.app=e;this.fileService=t||new G(e),this.editorContentService=r||new U;let s=new C;this.messageService=i||new H(this.fileService,s),this.frontmatterService=n||new K(e),this.templateService=o||new V(e,this.fileService,this.editorContentService)}async writeInferredTitle(e,t){return this.fileService.writeInferredTitle(e,t)}async ensureFolderExists(e,t){return this.fileService.ensureFolderExists(e,t)}getDate(e,t){return this.fileService.formatDate(e,t)}addHorizontalRule(e,t,r){this.editorContentService.addHorizontalRule(e,t,r)}clearChat(e){this.editorContentService.clearChat(e)}moveCursorToEnd(e){this.editorContentService.moveCursorToEnd(e)}async getMessagesFromEditor(e,t){return this.messageService.getMessagesFromEditor(e,t)}async createNewChatFromTemplate(e,t){return this.templateService.createNewChatFromTemplate(e,t)}async createNewChatWithHighlightedText(e,t){return this.templateService.createNewChatWithHighlightedText(e,t)}getFrontmatter(e,t,r){return this.frontmatterService.getFrontmatter(e,t)}processResponse(e,t,r){this.messageService.processResponse(e,t,r)}setModel(e,t){this.frontmatterService.updateFrontmatterField(e,"model",t)}};var ve={apiKey:"",openrouterApiKey:"",openaiUrl:S.url,openrouterUrl:v.url,ollamaUrl:T.url,chatFolder:"ChatGPT_MD/chats",chatTemplateFolder:"ChatGPT_MD/templates",stream:!0,generateAtCursor:!1,autoInferTitle:!1,dateFormat:J,headingLevel:$e,inferTitleLanguage:Ge,defaultChatFrontmatter:X};var se=require("obsidian");var ne=class extends se.PluginSettingTab{constructor(e,t,r){super(e,t),this.settingsProvider=r}display(){let{containerEl:e}=this;e.empty();let t=[{id:"apiKey",name:"OpenAI API Key",description:"API Key for OpenAI",type:"text",placeholder:"your openAI API Key",group:"API Keys"},{id:"openrouterApiKey",name:"OpenRouter.ai API Key",description:"API Key for OpenRouter.ai",type:"text",placeholder:"your openRouter API Key",group:"API Keys"},{id:"openaiUrl",name:"OpenAI API URL",description:`URL for OpenAI API
Default URL: ${S.url}`,type:"text",placeholder:S.url,group:"Service URLs"},{id:"openrouterUrl",name:"OpenRouter.ai API URL",description:`URL for OpenRouter.ai API
Default URL: ${v.url}`,type:"text",placeholder:v.url,group:"Service URLs"},{id:"ollamaUrl",name:"Ollama API URL",description:`URL for Ollama API
Default URL: ${T.url}`,type:"text",placeholder:T.url,group:"Service URLs"},{id:"defaultChatFrontmatter",name:"Default Chat Frontmatter",description:"Default frontmatter for new chat files. You can change/use all of the settings exposed by the OpenAI API here: https://platform.openai.com/docs/api-reference/chat/create",type:"textarea",placeholder:X,group:"Chat Behavior"},{id:"stream",name:"Stream",description:"Stream responses from OpenAI",type:"toggle",group:"Chat Behavior"},{id:"generateAtCursor",name:"Generate at Cursor",description:"Generate text at cursor instead of end of file",type:"toggle",group:"Chat Behavior"},{id:"autoInferTitle",name:"Automatically Infer Title",description:"Automatically infer title after 4 messages have been exchanged",type:"toggle",group:"Chat Behavior"},{id:"chatFolder",name:"Chat Folder",description:"Path to folder for chat files",type:"text",group:"Folders"},{id:"chatTemplateFolder",name:"Chat Template Folder",description:"Path to folder for chat file templates",type:"text",placeholder:"chat-templates",group:"Folders"},{id:"dateFormat",name:"Date Format",description:"Date format for chat files. Valid date blocks are: YYYY, MM, DD, hh, mm, ss",type:"text",placeholder:J,group:"Formatting"},{id:"headingLevel",name:"Heading Level",description:`Heading level for messages (example for heading level 2: '## ${w}${E}'). Valid heading levels are 0, 1, 2, 3, 4, 5, 6`,type:"text",group:"Formatting"},{id:"inferTitleLanguage",name:"Infer title language",description:"Language to use for title inference.",type:"dropdown",options:{English:"English",Japanese:"Japanese",Spanish:"Spanish",French:"French",German:"German",Chinese:"Chinese",Korean:"Korean",Italian:"Italian",Russian:"Russian"},group:"Formatting"}],r={};t.forEach(i=>{r[i.group]||(r[i.group]=[]),r[i.group].push(i)}),Object.entries(r).forEach(([i,o])=>{e.createEl("h3",{text:i}),o.forEach(n=>{this.createSettingElement(e,n)}),e.createEl("hr")})}createSettingElement(e,t){let r=new se.Setting(e).setName(t.name).setDesc(t.description);t.type==="text"?r.addText(i=>(i.setPlaceholder(t.placeholder||"").setValue(String(this.settingsProvider.settings[t.id])).onChange(async o=>{this.settingsProvider.settings[t.id]=o,await this.settingsProvider.saveSettings()}),i.inputEl.style.width="300px",i)):t.type==="textarea"?r.addTextArea(i=>(i.setPlaceholder(t.placeholder||"").setValue(String(this.settingsProvider.settings[t.id]||t.placeholder)).onChange(async o=>{this.settingsProvider.settings[t.id]=o,await this.settingsProvider.saveSettings()}),i.inputEl.style.width="300px",t.id==="defaultChatFrontmatter"&&(i.inputEl.style.height="260px",i.inputEl.style.minHeight="260px"),i)):t.type==="toggle"?r.addToggle(i=>i.setValue(!!this.settingsProvider.settings[t.id]).onChange(async o=>{this.settingsProvider.settings[t.id]=o,await this.settingsProvider.saveSettings()})):t.type==="dropdown"&&t.options&&r.addDropdown(i=>(i.addOptions(t.options||{}),i.setValue(String(this.settingsProvider.settings[t.id])),i.onChange(async o=>{this.settingsProvider.settings[t.id]=o,await this.settingsProvider.saveSettings()}),i.selectEl.style.width="300px",i))}};var ae=class{constructor(e,t=new C,r=new R(new C)){this.plugin=e;this.notificationService=t;this.errorService=r;this.settings=structuredClone(ve),this.loadSettings().catch(i=>this.notificationService.showError("Failed to load settings"))}getSettings(){return this.settings}async migrateSettings(){let e=[{setting:"ollamaUrl",pattern:/\/api\/$/,replacement:"",description:"Removing trailing /api/ from Ollama URL",introducedIn:"2.1.3"},{setting:"openrouterUrl",pattern:/\/api\/$/,replacement:"",description:"Removing trailing /api/ from OpenRouter URL",introducedIn:"2.1.3"},{setting:"openaiUrl",pattern:/\/$/,replacement:"",description:"Removing trailing slash from OpenAI URL",introducedIn:"2.1.3"}],t=!1;for(let r of e){let i=r.setting,o=this.settings[i];o&&r.pattern.test(o)&&(this.updateSettings({[i]:o.replace(r.pattern,r.replacement)}),console.log(`[ChatGPT MD] Migration (${r.introducedIn}): ${r.description}`),t=!0)}t&&(await this.saveSettings(),console.log("[ChatGPT MD] Migrated settings"))}async loadSettings(){let e=await this.plugin.loadData();return Object.assign(this.settings,ve,e),this.settings}async saveSettings(){await this.plugin.saveData(this.settings)}updateSettings(e){Object.assign(this.settings,e)}async addSettingTab(){await this.loadSettings(),this.plugin.addSettingTab(new ne(this.plugin.app,this.plugin,{settings:this.settings,saveSettings:this.saveSettings.bind(this)}))}};var ce=class{constructor(e,t){this.app=e,this.plugin=t,this.initializeServices()}initializeServices(){this.notificationService=new C,this.errorService=new R(this.notificationService),this.apiService=new _(this.errorService,this.notificationService),this.apiAuthService=new A(this.notificationService),this.apiResponseParser=new M(this.notificationService),this.fileService=new G(this.app),this.editorContentService=new U,this.messageService=new H(this.fileService,this.notificationService),this.frontmatterService=new K(this.app),this.templateService=new V(this.app,this.fileService,this.editorContentService),this.editorService=new oe(this.app,this.fileService,this.editorContentService,this.messageService,this.templateService,this.frontmatterService),this.settingsService=new ae(this.plugin,this.notificationService,this.errorService)}getAiApiService(e){switch(e){case g:return new te(this.errorService,this.notificationService,this.apiService,this.apiAuthService,this.apiResponseParser);case u:return new re(this.errorService,this.notificationService,this.apiService,this.apiAuthService,this.apiResponseParser);case m:return new ie(this.errorService,this.notificationService,this.apiService,this.apiAuthService,this.apiResponseParser);default:throw new Error(`Unknown AI service type: ${e}`)}}getFileService(){return this.fileService}getEditorContentService(){return this.editorContentService}getMessageService(){return this.messageService}getTemplateService(){return this.templateService}getFrontmatterService(){return this.frontmatterService}getEditorService(){return this.editorService}getNotificationService(){return this.notificationService}getErrorService(){return this.errorService}getApiService(){return this.apiService}getApiAuthService(){return this.apiAuthService}getApiResponseParser(){return this.apiResponseParser}getSettingsService(){return this.settingsService}};var x=require("obsidian");var le=require("obsidian"),q=class extends le.SuggestModal{constructor(e,t,r,i=[]){super(e),this.modelNames=i,this.editor=t,this.editorService=r,this.limit=this.modelNames.length,this.modelNames.length>0?this.setPlaceholder("Select Large Language Model"):this.setPlaceholder("Loading available models...")}getSuggestions(e){return this.modelNames.filter(t=>t.toLowerCase().includes(e.toLowerCase()))}renderSuggestion(e,t){t.createEl("div",{text:e})}onChooseSuggestion(e,t){this.modelNames.indexOf(e)===-1||this.modelNames.length===0||(new le.Notice(`Selected model: ${e}`),this.editorService.setModel(this.editor,e))}};var pe=class{constructor(e,t,r){this.aiService=null;this.availableModels=[];this.plugin=e,this.serviceLocator=t,this.settingsService=r,this.statusBarItemEl=e.addStatusBarItem(),this.apiAuthService=new A}registerCommands(){this.registerChatCommand(),this.registerSelectModelCommand(),this.registerAddDividerCommand(),this.registerAddCommentBlockCommand(),this.registerStopStreamingCommand(),this.registerInferTitleCommand(),this.registerMoveToNewChatCommand(),this.registerChooseChatTemplateCommand(),this.registerClearChatCommand()}registerChatCommand(){this.plugin.addCommand({id:Te,name:"Chat",icon:"message-circle",editorCallback:async(e,t)=>{var n;let r=this.serviceLocator.getEditorService(),i=this.settingsService.getSettings(),o=r.getFrontmatter(t,i,this.plugin.app);this.aiService=this.serviceLocator.getAiApiService(o.aiService);try{let{messagesWithRole:s,messages:a}=await r.getMessagesFromEditor(e,i);i.generateAtCursor||r.moveCursorToEnd(e),x.Platform.isMobile?new x.Notice(`[ChatGPT MD] Calling ${o.model}`):this.updateStatusBar(`Calling ${o.model}`);let p=this.apiAuthService.getApiKey(i,o.aiService),l=await this.aiService.callAIAPI(s,o,N(i.headingLevel),this.getAiApiUrls(o)[o.aiService],e,i.generateAtCursor,p,i);if(r.processResponse(e,l,i),i.autoInferTitle&&Ve((n=t==null?void 0:t.file)==null?void 0:n.basename,i.dateFormat)&&s.length>ke){let d={...o,openrouterApiKey:this.apiAuthService.getApiKey(i,m),url:this.getAiApiUrls(o)[o.aiService]};d.model||(console.log("[ChatGPT MD] Model not set for auto title inference, using default model"),o.aiService===g?d.model="gpt-4":o.aiService===u?d.model="llama2":o.aiService===m&&(d.model="anthropic/claude-3-opus:beta")),console.log("[ChatGPT MD] Auto-inferring title with settings:",{aiService:o.aiService,model:d.model}),await this.aiService.inferTitle(t,d,a,r)}}catch(s){x.Platform.isMobile&&new x.Notice(`[ChatGPT MD] Calling ${o.model}. `+s,9e3),console.log(s)}this.updateStatusBar("")}})}registerSelectModelCommand(){this.plugin.addCommand({id:"select-model-command",name:"Select Model",icon:"list",editorCallback:async(e,t)=>{let r=this.serviceLocator.getEditorService(),i=this.settingsService.getSettings(),o=new q(this.plugin.app,e,r,this.availableModels);o.open(),(async()=>{try{let n=r.getFrontmatter(t,i,this.plugin.app),s=this.apiAuthService.getApiKey(i,g),a=this.apiAuthService.getApiKey(i,m),p=this.getAiApiUrls(n),l=await this.fetchAvailableModels(p,s,a),d=new Set(this.availableModels),f=new Set(l);(this.availableModels.length!==l.length||![...d].every(y=>f.has(y))||![...f].every(y=>d.has(y)))&&l.length>0&&(console.log("[ChatGPT MD] Models updated. Refreshing modal."),this.availableModels=l,o.close(),new q(this.plugin.app,e,r,this.availableModels).open())}catch(n){console.error("[ChatGPT MD] Error fetching fresh models in background:",n)}})()}})}registerAddDividerCommand(){this.plugin.addCommand({id:Re,name:"Add divider",icon:"minus",editorCallback:async(e,t)=>{let r=this.serviceLocator.getEditorService(),i=this.settingsService.getSettings();r.addHorizontalRule(e,E,i.headingLevel)}})}registerAddCommentBlockCommand(){this.plugin.addCommand({id:Ce,name:"Add comment block",icon:"comment",editorCallback:(e,t)=>{let r=e.getCursor(),i=r.line,o=r.ch,n=`${be}${h}${Le}`;e.replaceRange(n,r);let s={line:i+1,ch:o};e.setCursor(s)}})}registerStopStreamingCommand(){this.plugin.addCommand({id:_e,name:"Stop streaming",icon:"octagon",callback:()=>{this.aiService&&"stopStreaming"in this.aiService?this.aiService.stopStreaming():this.serviceLocator.getNotificationService().showWarning("No active streaming request to stop")}})}registerInferTitleCommand(){this.plugin.addCommand({id:ye,name:"Infer title",icon:"subtitles",editorCallback:async(e,t)=>{let r=this.serviceLocator.getEditorService(),i=this.settingsService.getSettings(),o=r.getFrontmatter(t,i,this.plugin.app);if(this.aiService=this.serviceLocator.getAiApiService(o.aiService),!o.model){console.log("[ChatGPT MD] Model not set in frontmatter, using default model");return}this.updateStatusBar(`Calling ${o.model}`);let{messages:n}=await r.getMessagesFromEditor(e,i),s={...i,...o,openrouterApiKey:this.apiAuthService.getApiKey(i,m),url:this.getAiApiUrls(o)[o.aiService]};await this.aiService.inferTitle(t,s,n,r),this.updateStatusBar("")}})}registerMoveToNewChatCommand(){this.plugin.addCommand({id:Me,name:"Create new chat with highlighted text",icon:"highlighter",editorCallback:async(e,t)=>{let r=this.serviceLocator.getEditorService(),i=this.settingsService.getSettings();try{await r.createNewChatWithHighlightedText(e,i)}catch(o){console.error("[ChatGPT MD] Error in Create new chat with highlighted text",o),new x.Notice("[ChatGPT MD] Error in Create new chat with highlighted text, check console")}}})}registerChooseChatTemplateCommand(){this.plugin.addCommand({id:we,name:"Create new chat from template",icon:"layout-template",callback:async()=>{let e=this.serviceLocator.getEditorService(),t=this.settingsService.getSettings();if(t.dateFormat){await e.createNewChatFromTemplate(t,e.getDate(new Date,t.dateFormat));return}new x.Notice("date format cannot be empty in your ChatGPT MD settings. You can choose something like YYYYMMDDhhmmss")}})}registerClearChatCommand(){this.plugin.addCommand({id:Pe,name:"Clear chat (except frontmatter)",icon:"trash",editorCallback:async(e,t)=>{this.serviceLocator.getEditorService().clearChat(e)}})}getAiApiUrls(e){return{openai:e.openaiUrl||S.url,openrouter:e.openrouterUrl||v.url,ollama:e.ollamaUrl||T.url}}async initializeAvailableModels(){console.log("[ChatGPT MD] Initializing available models...");try{let e=this.settingsService.getSettings(),t=this.apiAuthService.getApiKey(e,g),r=this.apiAuthService.getApiKey(e,m),i={[g]:e.openaiUrl||S.url,[m]:e.openrouterUrl||v.url,[u]:e.ollamaUrl||T.url};this.availableModels=await this.fetchAvailableModels(i,t,r),console.log(`[ChatGPT MD] Found ${this.availableModels.length} available models.`)}catch(e){console.error("[ChatGPT MD] Error initializing available models:",e),this.availableModels=[]}}async fetchAvailableModels(e,t,r){function i(o,n,s){return Promise.race([o,new Promise(a=>setTimeout(()=>a(s),n))])}try{let o=new A,n=[];return n.push(i(Ye(e[u]),Z,[])),P(t)&&n.push(i(qe(e[g],t),Z,[])),P(r)&&n.push(i(je(e[m],r),Z,[])),(await Promise.all(n)).flat()}catch(o){return new x.Notice("Error fetching models: "+(o instanceof Error?o.message:String(o))),console.error("Error fetching models:",o),[]}}updateStatusBar(e){this.statusBarItemEl.setText(`[ChatGPT MD] ${e}`)}};var me=class extends ze.Plugin{async onload(){this.serviceLocator=new ce(this.app,this);let e=this.serviceLocator.getSettingsService();await e.loadSettings(),await e.migrateSettings(),await e.addSettingTab(),this.commandRegistry=new pe(this,this.serviceLocator,e),this.commandRegistry.registerCommands(),this.commandRegistry.initializeAvailableModels().catch(t=>{console.error("[ChatGPT MD] Error initializing models in background:",t)})}};

/* nosourcemap */